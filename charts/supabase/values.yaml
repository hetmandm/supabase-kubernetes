# Production Supabase Helm Values для RKE2 + Longhorn
# Hostname: spb.k8s-ga.nd.lan
# User: gadev

secret:
  jwt:
    # ДЛЯ ТЕСТИРОВАНИЯ: Это демо-токены, для production сгенерируйте новые!
    # Команда генерации: supabase gen keys ИЛИ используйте скрипт выше
    anonKey: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJhbm9uIiwKICAgICJpc3MiOiAic3VwYWJhc2UtZGVtbyIsCiAgICAiaWF0IjogMTY0MTc2OTIwMCwKICAgICJleHAiOiAxNzk5NTM1NjAwCn0.dc_X5iR_VP_qT0zsiyj_I_OZ2T9FtRU2BBNWN8Bu4GE"
    serviceKey: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJzZXJ2aWNlX3JvbGUiLAogICAgImlzcyI6ICJzdXBhYmFzZS1kZW1vIiwKICAgICJpYXQiOiAxNjQxNzY5MjAwLAogICAgImV4cCI6IDE3OTk1MzU2MDAKfQ.DaYlNEoUrrEn2Ig7tqibS-PHK5vgusbcbo7X36XVt4Q"
    secret: "your-super-secret-jwt-token-with-at-least-32-characters-long"
  smtp:
    username: "gadev@k8s-ga.nd.lan"
    password: "f3)imybyc=P*P=_"
  dashboard:
    username: "gadev"
    password: "f3)imybyc=P*P=_"
  db:
    username: "postgres"
    password: "f3)imybyc=P*P=_"
    database: "postgres"
  analytics:
    apiKey: "f3)imybyc=P*P=_"

# PostgreSQL Database с оптимизацией для Longhorn
db:
  enabled: true
  image:
    repository: supabase/postgres
    pullPolicy: IfNotPresent
    tag: "15.1.0.147"
  replicaCount: 1
  
  # Liveness probe для PostgreSQL
  livenessProbe:
    exec:
      command:
        - pg_isready
        - -U
        - postgres
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    
  readinessProbe:
    exec:
      command:
        - pg_isready
        - -U
        - postgres
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 3
    
  serviceAccount:
    create: true
    annotations: {}
    name: ""
    
  podAnnotations:
    backup.longhorn.io/volume-snapshot: "true"
    
  podSecurityContext:
    fsGroup: 999
    
  securityContext:
    runAsUser: 999
    runAsGroup: 999
    runAsNonRoot: true
    
  service:
    type: ClusterIP
    port: 5432
    
  environment:
    POSTGRES_HOST: "/var/run/postgresql"
    PGPORT: "5432"
    POSTGRES_PORT: "5432"
    JWT_EXP: "3600"
    POSTGRES_HOST_AUTH_METHOD: "md5"
    
  # Ресурсы для production нагрузки
  resources:
    limits:
      cpu: "2000m"
      memory: "4Gi"
    requests:
      cpu: "500m"
      memory: "1Gi"
      
  # Persistence с использованием data-db StorageClass
  persistence:
    enabled: true
    storageClassName: "data-db"  # Специальный класс для БД с nodeSelector: db
    annotations:
      backup.longhorn.io/volume-snapshot: "true"
    size: 20Gi
    accessModes:
      - ReadWriteOnce
      
  autoscaling:
    enabled: false  # Отключено для БД
    
  # Node affinity для размещения на узлах с DB дисками
  nodeSelector:
    node-type: "db"  # Соответствует nodeSelector в data-db StorageClass
    
  tolerations: []
  
  # Pod Anti-Affinity для высокой доступности
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - supabase-db
          topologyKey: kubernetes.io/hostname

# Supabase Studio
studio:
  enabled: true
  image:
    repository: supabase/studio
    pullPolicy: IfNotPresent
    tag: "20240326-5e5586d"
  replicaCount: 1
  
  livenessProbe:
    httpGet:
      path: /api/profile
      port: 3000
    initialDelaySeconds: 30
    periodSeconds: 30
    
  readinessProbe:
    httpGet:
      path: /api/profile
      port: 3000
    initialDelaySeconds: 15
    periodSeconds: 10
    
  serviceAccount:
    create: true
    
  service:
    type: ClusterIP
    port: 3000
    
  environment:
    STUDIO_DEFAULT_ORGANIZATION: "GA Development"
    STUDIO_DEFAULT_PROJECT: "Supabase Production"
    STUDIO_PORT: "3000"
    SUPABASE_PUBLIC_URL: "https://spb.k8s-ga.nd.lan"
    NEXT_PUBLIC_ENABLE_LOGS: "true"
    NEXT_ANALYTICS_BACKEND_PROVIDER: "postgres"
    
  resources:
    limits:
      cpu: "500m"
      memory: "1Gi"
    requests:
      cpu: "100m"
      memory: "256Mi"
      
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 70
    
  nodeSelector:
    node-type: "data"  # Размещение на data узлах
    
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - supabase-studio
          topologyKey: kubernetes.io/hostname

# Auth Service (GoTrue)
auth:
  enabled: true
  image:
    repository: supabase/gotrue
    pullPolicy: IfNotPresent
    tag: "v2.143.0"
  replicaCount: 2  # Высокая доступность
  
  livenessProbe:
    httpGet:
      path: /health
      port: 9999
    initialDelaySeconds: 30
    
  readinessProbe:
    httpGet:
      path: /health
      port: 9999
    initialDelaySeconds: 15
    
  service:
    type: ClusterIP
    port: 9999
    
  environment:
    DB_USER: "supabase_auth_admin"
    DB_PORT: "5432"
    DB_DRIVER: "postgres"
    DB_SSL: "disable"
    API_EXTERNAL_URL: "https://spb.k8s-ga.nd.lan"
    GOTRUE_API_HOST: "0.0.0.0"
    GOTRUE_API_PORT: "9999"
    GOTRUE_SITE_URL: "https://spb.k8s-ga.nd.lan"
    GOTRUE_URI_ALLOW_LIST: "*"
    GOTRUE_DISABLE_SIGNUP: "false"
    GOTRUE_JWT_DEFAULT_GROUP_NAME: "authenticated"
    GOTRUE_JWT_ADMIN_ROLES: "service_role"
    GOTRUE_JWT_AUD: "authenticated"
    GOTRUE_JWT_EXP: "3600"
    GOTRUE_EXTERNAL_EMAIL_ENABLED: "true"
    GOTRUE_MAILER_AUTOCONFIRM: "false"  # Для production лучше false
    GOTRUE_SMTP_ADMIN_EMAIL: "gadev@k8s-ga.nd.lan"
    GOTRUE_SMTP_HOST: "smtp.k8s-ga.nd.lan"
    GOTRUE_SMTP_PORT: "587"
    GOTRUE_SMTP_SENDER_NAME: "GA Development"
    GOTRUE_EXTERNAL_PHONE_ENABLED: "false"
    
  resources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"
      
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
    
  nodeSelector:
    node-type: "data"
    
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - supabase-auth
        topologyKey: kubernetes.io/hostname

# REST API (PostgREST)
rest:
  enabled: true
  image:
    repository: postgrest/postgrest
    pullPolicy: IfNotPresent
    tag: "v12.0.1"
  replicaCount: 2
  
  livenessProbe:
    httpGet:
      path: /
      port: 3000
    initialDelaySeconds: 30
    
  readinessProbe:
    httpGet:
      path: /
      port: 3000
    initialDelaySeconds: 15
    
  service:
    type: ClusterIP
    port: 3000
    
  environment:
    DB_USER: "authenticator"
    DB_PORT: "5432"
    DB_DRIVER: "postgres"
    DB_SSL: "disable"
    PGRST_DB_SCHEMAS: "public,storage,graphql_public"
    PGRST_DB_ANON_ROLE: "anon"
    PGRST_DB_USE_LEGACY_GUCS: "false"
    PGRST_APP_SETTINGS_JWT_EXP: "3600"
    
  resources:
    limits:
      cpu: "1000m"
      memory: "1Gi"
    requests:
      cpu: "200m"
      memory: "256Mi"
      
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 6
    targetCPUUtilizationPercentage: 70
    
  nodeSelector:
    node-type: "data"
    
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - supabase-rest
        topologyKey: kubernetes.io/hostname

# Realtime Service
realtime:
  enabled: true
  image:
    repository: supabase/realtime
    pullPolicy: IfNotPresent
    tag: "v2.27.5"
  replicaCount: 2
  
  livenessProbe:
    httpGet:
      path: /
      port: 4000
    initialDelaySeconds: 30
    
  readinessProbe:
    httpGet:
      path: /
      port: 4000
    initialDelaySeconds: 15
    
  service:
    type: ClusterIP
    port: 4000
    
  environment:
    DB_USER: "supabase_admin"
    DB_PORT: "5432"
    DB_SSL: "disable"
    DB_AFTER_CONNECT_QUERY: "SET search_path TO _realtime"
    DB_ENC_KEY: "supabaserealtime"
    PORT: "4000"
    FLY_ALLOC_ID: "k8s-ga-prod"
    FLY_APP_NAME: "realtime"
    SECRET_KEY_BASE: "production-secret-key-base-change-this-in-production-environment"
    ERL_AFLAGS: "-proto_dist inet_tcp"
    ENABLE_TAILSCALE: "false"
    DNS_NODES: "''"
    
  resources:
    limits:
      cpu: "1000m"
      memory: "1Gi"
    requests:
      cpu: "200m"
      memory: "256Mi"
      
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 4
    targetCPUUtilizationPercentage: 70
    
  nodeSelector:
    node-type: "data"
    
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - supabase-realtime
        topologyKey: kubernetes.io/hostname

# Meta Service
meta:
  enabled: true
  image:
    repository: supabase/postgres-meta
    pullPolicy: IfNotPresent
    tag: "v0.80.0"
  replicaCount: 1
  
  livenessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 30
    
  readinessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 15
    
  service:
    type: ClusterIP
    port: 8080
    
  environment:
    DB_USER: "supabase_admin"
    DB_PORT: "5432"
    DB_DRIVER: "postgres"
    DB_SSL: "disable"
    PG_META_PORT: "8080"
    
  resources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"
      
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 70
    
  nodeSelector:
    node-type: "data"

# Storage Service с Longhorn persistence
storage:
  enabled: true
  image:
    repository: supabase/storage-api
    pullPolicy: IfNotPresent
    tag: "v0.46.4"
  replicaCount: 2
  
  livenessProbe:
    httpGet:
      path: /status
      port: 5000
    initialDelaySeconds: 30
    
  readinessProbe:
    httpGet:
      path: /status
      port: 5000
    initialDelaySeconds: 15
    
  service:
    type: ClusterIP
    port: 5000
    
  environment:
    DB_USER: "supabase_storage_admin"
    DB_PORT: "5432"
    DB_DRIVER: "postgres"
    DB_SSL: "disable"
    PGOPTIONS: "-c search_path=storage,public"
    FILE_SIZE_LIMIT: "52428800"  # 50MB
    STORAGE_BACKEND: "file"
    FILE_STORAGE_BACKEND_PATH: "/var/lib/storage"
    TENANT_ID: "stub"
    REGION: "k8s-ga"
    GLOBAL_S3_BUCKET: "stub"
    
  resources:
    limits:
      cpu: "1000m"
      memory: "1Gi"
    requests:
      cpu: "200m"
      memory: "256Mi"
      
  # Persistence с использованием data StorageClass
  persistence:
    enabled: true
    storageClassName: "data"  # data StorageClass с nodeSelector: data
    annotations:
      backup.longhorn.io/volume-snapshot: "true"
    size: 100Gi
    accessModes:
      - ReadWriteOnce
      
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 4
    targetCPUUtilizationPercentage: 70
    
  nodeSelector:
    node-type: "data"  # Соответствует nodeSelector в data StorageClass
    
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - supabase-storage
        topologyKey: kubernetes.io/hostname

# Image Proxy
imgproxy:
  enabled: true
  image:
    repository: darthsim/imgproxy
    pullPolicy: IfNotPresent
    tag: "v3.8.0"
  replicaCount: 2
  
  livenessProbe:
    exec:
      command:
        - imgproxy
        - health
    initialDelaySeconds: 30
    
  readinessProbe:
    exec:
      command:
        - imgproxy
        - health
    initialDelaySeconds: 15
    
  service:
    type: ClusterIP
    port: 5001
    
  environment:
    IMGPROXY_BIND: ":5001"
    IMGPROXY_LOCAL_FILESYSTEM_ROOT: "/"
    IMGPROXY_USE_ETAG: "true"
    IMGPROXY_ENABLE_WEBP_DETECTION: "true"
    
  resources:
    limits:
      cpu: "1000m"
      memory: "1Gi"
    requests:
      cpu: "200m"
      memory: "256Mi"
      
  persistence:
    enabled: true
    storageClassName: "data"
    size: 20Gi
    accessModes:
      - ReadWriteOnce
      
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 4
    targetCPUUtilizationPercentage: 70
    
  nodeSelector:
    node-type: "data"
    
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - supabase-imgproxy
          topologyKey: kubernetes.io/hostname

# Kong API Gateway с NGINX Ingress
kong:
  enabled: true
  image:
    repository: kong
    pullPolicy: IfNotPresent
    tag: "2.8.1"
  replicaCount: 2
  
  livenessProbe:
    httpGet:
      path: /status
      port: 8000
    initialDelaySeconds: 30
    
  readinessProbe:
    httpGet:
      path: /status
      port: 8000
    initialDelaySeconds: 15
    
  service:
    type: ClusterIP
    port: 8000
    
  environment:
    KONG_DATABASE: "off"
    KONG_DECLARATIVE_CONFIG: "/usr/local/kong/kong.yml"
    KONG_DNS_ORDER: "LAST,A,CNAME"
    KONG_PLUGINS: "request-transformer,cors,key-auth,acl,basic-auth"
    KONG_NGINX_PROXY_PROXY_BUFFER_SIZE: "160k"
    KONG_NGINX_PROXY_PROXY_BUFFERS: "64 160k"
    KONG_LOG_LEVEL: "info"
    
  # Ingress конфигурация для production
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: "50m"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
      # cert-manager.io/cluster-issuer: "letsencrypt-prod"  # Раскомментируйте если используете cert-manager
      
    tls:
      - secretName: spb-k8s-ga-tls
        hosts:
          - spb.k8s-ga.nd.lan
          
    hosts:
      - host: spb.k8s-ga.nd.lan
        paths:
          - path: /
            pathType: Prefix
            
  resources:
    limits:
      cpu: "1000m"
      memory: "1Gi"
    requests:
      cpu: "200m"
      memory: "256Mi"
      
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
    
  nodeSelector:
    node-type: "data"
    
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - supabase-kong
        topologyKey: kubernetes.io/hostname

# Analytics (Logflare)
analytics:
  enabled: true
  image:
    repository: supabase/logflare
    pullPolicy: IfNotPresent
    tag: "1.4.0"
  replicaCount: 1
  
  livenessProbe:
    httpGet:
      path: /health
      port: 4000
    initialDelaySeconds: 30
    
  readinessProbe:
    httpGet:
      path: /health
      port: 4000
    initialDelaySeconds: 15
    
  service:
    type: ClusterIP
    port: 4000
    
  environment:
    LOGFLARE_NODE_HOST: "127.0.0.1"
    DB_USERNAME: "supabase_admin"
    DB_PORT: "5432"
    DB_DRIVER: "postgresql"
    DB_SCHEMA: "_analytics"
    LOGFLARE_SINGLE_TENANT: "true"
    LOGFLARE_SUPABASE_MODE: "true"
    FEATURE_FLAG_OVERRIDE: "multibackend=true"
    
  bigQuery:
    enabled: false
    
  resources:
    limits:
      cpu: "500m"
      memory: "1Gi"
    requests:
      cpu: "100m"
      memory: "256Mi"
      
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 70
    
  nodeSelector:
    node-type: "data"

# Vector для логирования
vector:
  enabled: true
  image:
    repository: timberio/vector
    pullPolicy: IfNotPresent
    tag: "0.34.0-alpine"
  replicaCount: 1
  
  livenessProbe:
    httpGet:
      path: /health
      port: 9001
    initialDelaySeconds: 30
    
  readinessProbe:
    httpGet:
      path: /health
      port: 9001
    initialDelaySeconds: 15
    
  service:
    type: ClusterIP
    port: 9001
    
  # Volume mounts для сбора логов с RKE2
  volumeMounts:
    - name: pod-logs
      mountPath: /var/log/pods
      readOnly: true
    - name: container-logs
      mountPath: /var/lib/rancher/rke2/agent/containerd
      readOnly: true
      
  volumes:
    - name: pod-logs
      hostPath:
        path: /var/log/pods
    - name: container-logs
      hostPath:
        path: /var/lib/rancher/rke2/agent/containerd
        
  resources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"
      
  nodeSelector:
    node-type: "data"

# Edge Functions
functions:
  enabled: true
  image:
    repository: supabase/edge-runtime
    pullPolicy: IfNotPresent
    tag: "v1.41.2"
  replicaCount: 2
  
  livenessProbe:
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 30
    
  readinessProbe:
    httpGet:
      path: /health
      port: 9000
    initialDelaySeconds: 15
    
  service:
    type: ClusterIP
    port: 9000
    
  environment:
    DB_USERNAME: "supabase_functions_admin"
    DB_PORT: "5432"
    DB_DRIVER: "postgresql"
    DB_SSL: "disable"
    
  resources:
    limits:
      cpu: "1000m"
      memory: "1Gi"
    requests:
      cpu: "200m"
      memory: "256Mi"
      
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
    
  nodeSelector:
    node-type: "data"
    
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
              - supabase-functions
          topologyKey: kubernetes.io/hostname

# MinIO отключен, используем Longhorn storage
minio:
  enabled: false